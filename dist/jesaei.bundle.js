(()=>{var __webpack_modules__={138:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony import */ var _js_main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(693);\n/* harmony import */ var _js_main_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_js_main_js__WEBPACK_IMPORTED_MODULE_0__);\n\n// import "./js/feednami-client-v1.1.js";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM4LmpzIiwibWFwcGluZ3MiOiI7O0FBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5jaG9yLWVwaXNvZGVzLWluZGV4Ly4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi9zY3NzL21haW4uc2Nzc1wiO1xuLy8gaW1wb3J0IFwiLi9qcy9mZWVkbmFtaS1jbGllbnQtdjEuMS5qc1wiO1xuaW1wb3J0IFwiLi9qcy9tYWluLmpzXCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///138\n')},693:()=>{eval("document.addEventListener('DOMContentLoaded', () => {\n  // Your site url (must include https://anchor.fm/)\n  const siteUrl = window.jesAnchorEpisodesSiteUrl\n  // Get position to split url for modification seen below\n  const urlModPosition = siteUrl.length\n  // RSS feed URL (site key is found in RSS feed URL)\n  const rssUrl = window.jesAnchorEpisodesRssUrl\n  // Container which holds the iframe - so that we can append the podcast list just below it\n  const iframeContainer = document.getElementById('podcasts-player-container')\n\n  fetch(rssUrl)\n    .then((response) => response.text())\n    .then((str) => new window.DOMParser().parseFromString(str, 'text/xml'))\n    .then((feed) => {\n      console.log(feed)\n      console.log(feed.querySelectorAll('item'))\n\n      let episodes = feed.querySelectorAll('item')\n      // convert from node list to array\n      episodes = Array.from(episodes)\n\n      const podcastListContainer = document.getElementById(\n        'podcast-list-container'\n      )\n      console.log(podcastListContainer)\n      const maxEpisodes = window.jesAnchorMaxEpisodes\n\n      if (maxEpisodes < episodes.length) {\n        episodes = episodes.slice(0, maxEpisodes)\n      }\n\n      // Loop through the JSON to produce the list\n      for (const episode of episodes) {\n        console.log(episode.querySelector('link').innerHTML)\n        const thumbnailUrl = episode\n          .querySelector('image')\n          .getAttribute('href')\n        // add '/embed' to URL so that it works in an iframe\n        const originalURL = episode.querySelector('link').innerHTML\n        const pathToAdd = '/embed'\n        const revisedUrl = [\n          originalURL.slice(0, urlModPosition),\n          pathToAdd,\n          originalURL.slice(urlModPosition),\n        ].join('')\n\n        // create an excerpt out of the title\n        const title = episode.querySelector('title').innerHTML\n        const titleMaxLength = 41\n        const titleExcerpt = title.substring(0, titleMaxLength) + '...'\n\n        // create an excerpt out of the description\n        const description = episode\n          .querySelector('description')\n          .innerHTML.replace(/<[^>]*>?/gm, '') // strip html also\n        const descriptionMaxLength = 114\n        const descriptionExcerpt =\n          description.length > descriptionMaxLength\n            ? description.substring(0, descriptionMaxLength)\n            : description\n        const hasDescriptionExcerpt =\n          description.length > descriptionMaxLength ? true : false\n        const descriptionExcerptHtml = hasDescriptionExcerpt\n          ? `<span class=\"podcast-description-show-more-btn\" data-full-description=\"${description}\">...</span>`\n          : ''\n\n        // get minutes and seconds from seconds formatted data\n        let duration = episode.querySelector('duration').innerHTML\n        const minutes = Math.floor(duration / 60)\n        const seconds = duration - minutes * 60\n        const hours = Math.floor(duration / 3600)\n        duration = duration - hours * 3600\n\n        const str_pad_left = (string, pad, length) => {\n          return (new Array(length + 1).join(pad) + string).slice(-length)\n        }\n\n        const finalTime =\n          str_pad_left(minutes, '0', 2) + ':' + str_pad_left(seconds, '0', 2)\n\n        // convert JSON ISO 8601 formatted date in to a readable date\n        const date = new Date(episode.querySelector('pubDate').innerHTML)\n        const monthNames = [\n          'January',\n          'February',\n          'March',\n          'April',\n          'May',\n          'June',\n          'July',\n          'August',\n          'September',\n          'October',\n          'November',\n          'December',\n        ]\n        const month = monthNames[date.getMonth()]\n        const day = date.getDate()\n        const year = date.getFullYear()\n\n        // Output the episode on the page with the data we have prepared\n        podcastListContainer.innerHTML += `\n\t\t\t\t<div class=\"styles__episodeFeedItem___1U6E2\">\n\t\t\t\t  <a class=\"podcast-list-link styles__episodeImage___tMifW\" href=\"${revisedUrl}\" target=\"iframe\">\n\t\t\t\t\t<img src=\"${thumbnailUrl}\">\n\t\t\t\t\t<button class=\"styles__circle___1g-9u styles__white___372tQ styles__playButton___1Ivi4 styles__playButton___1uaGA\" aria-label=\"\" style=\"height: 31px; min-height: 31px; width: 31px; min-width: 31px; border-radius: 16px;\">\n\t\t\t\t\t  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-1 0 11 12\" width=\"13\" height=\"13\"><rect width=\"12\" height=\"12\" fill=\"none\"></rect><path d=\"M1 .81v10.38a.76.76 0 0 0 .75.75.67.67 0 0 0 .39-.12l8.42-5.18a.75.75 0 0 0 0-1.28L2.14.18a.75.75 0 0 0-1 .24.79.79 0 0 0-.14.39z\" fill=\"#282F36\"></path></svg>\n\t\t\t\t\t</button>\n\t\t\t\t  </a>\n\t\t\t\t  <a class=\"podcast-list-link\" href=\"${revisedUrl}\" target=\"iframe\">\n\t\t\t\t\t<div class=\"styles__episodeHeading___29q7v\" style=\"overflow: hidden;\">\n\t\t\t\t\t  <div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t  ${titleExcerpt}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t  </div>\n\t\t\t\t\t</div>\n\t\t\t\t  </a>\n\t\t\t\t  <div class=\"styles__episodeDescription___C3oZg \">\n\t\t\t\t\t<div class=\"styles__expander___1NNVb styles__expander--dark___3Qxhe\">\n\t\t\t\t\t  <div>\n\t\t\t\t\t\t<div class=\"podcast-description\">\n\t\t\t\t\t\t  ${descriptionExcerpt}\n\t\t\t\t\t\t  ${descriptionExcerptHtml}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t  </div>\n\t\t\t\t\t</div>\n\t\t\t\t  </div>\n\t\t\t\t  <div class=\"styles__episodeDuration___2I0Qb\">\n\t\t\t\t\t${finalTime}\n\t\t\t\t  </div>\n\t\t\t\t  <div class=\"styles__episodeCreated___1zP5p\">\n\t\t\t\t\t${month} ${day}, ${year}\n\t\t\t\t  </div>\n\t\t\t\t</div>\n\t\t\t  `\n      }\n    })\n})\n\nconst checkShowMoreBtnsExist = setInterval(() => {\n  if (\n    document.getElementsByClassName('podcast-description-show-more-btn').length\n  ) {\n    setShowMoreEvents()\n    clearInterval(checkShowMoreBtnsExist)\n  }\n}, 100) // check every 100ms\n\nconst setShowMoreEvents = () => {\n  const showMoreBtns = document.getElementsByClassName(\n    'podcast-description-show-more-btn'\n  )\n  for (i = 0; i < showMoreBtns.length; i++) {\n    showMoreBtns[i].addEventListener('click', (e) => {\n      e = e || window.event\n      const target = e.target || e.srcElement\n      const description = target.dataset.fullDescription\n      target.parentElement.innerHTML = description\n    })\n  }\n\n  // set responsive breakpoint for the player iframe - adjust height\n  const anchorIframe = document.getElementById('anchor-podcast-iframe')\n  const anchorIframeWidth = anchorIframe.offsetWidth\n  const loadingAnimation = document.getElementById(\n    'podcast-player-loading-animation'\n  )\n\n  if (anchorIframeWidth > 768) {\n    anchorIframe.style.height = '161px'\n    loadingAnimation.style.top = '40px'\n  } else {\n    anchorIframe.style.height = '98px'\n    loadingAnimation.style.top = '10px'\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///693\n")}},__webpack_module_cache__={};function __webpack_require__(t){var c=__webpack_module_cache__[t];if(void 0!==c)return c.exports;var n=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t](n,n.exports,__webpack_require__),n.exports}__webpack_require__.n=t=>{var c=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(c,{a:c}),c},__webpack_require__.d=(t,c)=>{for(var n in c)__webpack_require__.o(c,n)&&!__webpack_require__.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:c[n]})},__webpack_require__.o=(t,c)=>Object.prototype.hasOwnProperty.call(t,c);var __webpack_exports__=__webpack_require__(138)})();